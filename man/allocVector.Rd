% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allocVector.R
\name{allocVector}
\alias{allocVector}
\alias{Rf_allocVector}
\alias{NEW_LOGICAL}
\alias{NEW_INTEGER}
\alias{NEW_NUMERIC}
\alias{NEW_CHARACTER}
\alias{NEW_COMPLEX}
\alias{NEW_LIST}
\alias{NEW_STRING}
\alias{NEW_RAW}
\title{Allocates a Vector}
\source{
Declaration: \href{https://github.com/wch/r-source/blob/trunk/src/include/Rinternals.h}{src/include/Rinternals.h} and \href{https://github.com/wch/r-source/blob/trunk/src/include/Rdefines.h}{src/include/Rdefines.h}

Implementation: \verb{allocVector(SEXPTYPE type, R_xlen_t length)} is a simple inline wrapper functions that calls \code{allocVector3(type, length, NULL)}, cf. \href{https://github.com/wch/r-source/blob/trunk/src/include/Rinlinedfuns.h}{src/include/Rinlinedfuns.h}
}
\usage{
allocVector(type, length)
}
\arguments{
\item{type}{(\link{SEXPTYPE}) An macro constant of length one.}

\item{length}{(R_xlen_t) An non-negative integer.}
}
\value{
\code{allocVector()} returns an \link{SEXP} object of type \link{SEXPTYPE} \code{type}.
}
\description{
Allocates a Vector
}
\section{C API}{
\if{html}{\out{<div class="c">}}\preformatted{#include <Rinternals.h>
SEXP     Rf_allocVector(SEXPTYPE, R_xlen_t)
#define allocVector		Rf_allocVector
}\if{html}{\out{</div>}}

Related macros:\if{html}{\out{<div class="c">}}\preformatted{#include <Rdefines.h>
#define NEW_LOGICAL(n)		Rf_allocVector(LGLSXP,n)
#define NEW_INTEGER(n)		Rf_allocVector(INTSXP,n)
#define NEW_NUMERIC(n)		Rf_allocVector(REALSXP,n)
#define NEW_CHARACTER(n)	Rf_allocVector(STRSXP,n)
#define NEW_COMPLEX(n)		Rf_allocVector(CPLXSXP,n)
#define NEW_LIST(n)		Rf_allocVector(VECSXP,n)
#define NEW_STRING(n)		NEW_CHARACTER(n)
#define NEW_RAW(n)		Rf_allocVector(RAWSXP,n)
}\if{html}{\out{</div>}}
}

\section{R API}{
\if{html}{\out{<div class="r">}}\preformatted{library(base)

x_logical   <- logical(length = n)
x_integer   <- integer(length = n)
x_numeric   <- numeric(length = n)
x_character <- character(length = n)
x_complex   <- complex(length.out = n)
x_list      <- vector(mode = "list", length = n)
x_raw       <- raw(length = n)
}\if{html}{\out{</div>}}
}

